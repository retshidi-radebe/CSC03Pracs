Microsoft (R) Macro Assembler Version 6.11		    08/15/24 16:43:47
src\220138825_P04.asm					     Page 1 - 1


				;	Update all of this information to reflect your own details and the prac
				;	Author:     RE RADEBE 220138825
				;	Practical Assignment 04
				.386
				.MODEL FLAT ; Flat memory model
				.STACK 4096 ; 4096 bytes

				INCLUDE io.inc
			      C ;
			      C ; Simple I/O Routines - Version 2
			      C ;
			      C 
			      C IFNDEF IO_INC
 = 1			      C IO_INC equ <1>
			      C 
			      C OutputStr PROTO NEAR32 STDCALL :DWORD
			      C OutputInt PROTO NEAR32 STDCALL :DWORD
			      C OutputFloat PROTO NEAR32 STDCALL :DWORD
			      C OutputFloat8 PROTO NEAR32 STDCALL :QWORD
			      C InputInt PROTO NEAR32 STDCALL
			      C InputStr PROTO NEAR32 STDCALL :DWORD, :DWORD
			      C 
			      C ELSE
			      C ENDIF
			      C 

				; Exit function
				ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD

				; The data section stores all global variables
 00000000			.DATA
						; STRING PROMPTS
 00000000 45 6E 74 65 72		strAge				BYTE	"Enter the Age: ", 0
	   20 74 68 65 20
	   41 67 65 3A 20
	   00
 00000010 45 6E 74 65 72		strRHR				BYTE	"Enter the Resting Heart rate (RHR): ", 0
	   20 74 68 65 20
	   52 65 73 74 69
	   6E 67 20 48 65
	   61 72 74 20 72
	   61 74 65 20 28
	   52 48 52 29 3A
	   20 00
 00000035 45 6E 74 65 72		strCMul				BYTE 	"Enter Calorie Multiplier (CMul): ", 0
	   20 43 61 6C 6F
	   72 69 65 20 4D
	   75 6C 74 69 70
	   6C 69 65 72 20
	   28 43 4D 75 6C
	   29 3A 20 00
 00000057 45 6E 74 65 72		strHR1				BYTE	"Enter the Heart Rate 01: ", 0
	   20 74 68 65 20
	   48 65 61 72 74
	   20 52 61 74 65
	   20 30 31 3A 20
	   00
 00000071 45 6E 74 65 72		strHR2				BYTE	"Enter the Heart Rate 02: ", 0
	   20 74 68 65 20
	   48 65 61 72 74
	   20 52 61 74 65
	   20 30 32 3A 20
	   00
 0000008B 45 6E 74 65 72		strHR3				BYTE	"Enter the Heart Rate 03: ", 0		
	   20 74 68 65 20
	   48 65 61 72 74
	   20 52 61 74 65
	   20 30 33 3A 20
	   00
 000000A5 48 65 61 72 74		strHRF				BYTE	"Heart Rate Factors: ", 0
	   20 52 61 74 65
	   20 46 61 63 74
	   6F 72 73 3A 20
	   00
 000000BA 50 72 65 73 73		strExit				BYTE 	"Press 0 to exit or any positive number to contunue: ", 0
	   20 30 20 74 6F
	   20 65 78 69 74
	   20 6F 72 20 61
	   6E 79 20 70 6F
	   73 69 74 69 76
	   65 20 6E 75 6D
	   62 65 72 20 74
	   6F 20 63 6F 6E
	   74 75 6E 75 65
	   3A 20 00
 000000EF 48 52 46 5B 00		strDisp1			BYTE	"HRF[", 0
 000000F4 5D 2C 20 00			strDisp2			BYTE	"], ", 0
 000000F8  0000000A [			arrHR				BYTE	10 DUP	(?)
	    00
	   ]
 00000102 0A 00				strNL				BYTE	10 ,0
					
						;User Input Data variables
 00000104  00000003 [			HR					DWORD	3	DUP	(?)
	    00000000
	   ]
 00000110  00000003 [			HRF					DWORD	3  	DUP (?)	
	    00000000
	   ]

				; The code section may contain multiple tags such as _start, which is the entry
				; point of this assembly program
 00000000			.CODE
 00000000			_start:
 00000000				; Most of your initial code will be under the _start tag.
					; The _start tag is just a memory address referenced by the Public indicator
					; highlighting which functions are available to calling functions.
					; _start gets called by the operating system to start this process.
 00000000  83 EC 0C			sub esp, 12

					;===========Input the Age============
					INVOKE		OutputStr, ADDR	strAge
					INVOKE		InputInt
 00000012  89 04 24			mov 		[esp], eax		;Age storage

					;===========Input the Resting Heart Rate============
					INVOKE		OutputStr, ADDR	strRHR
					INVOKE		InputInt
 00000024  89 44 24 04			mov			[esp + 4], eax	;RHR storage

					;===========Input the Calorie Multiplier============
					INVOKE		OutputStr, ADDR	strCMul
					INVOKE		InputInt
 00000037  89 44 24 08			mov			[esp + 8], eax	;CMul storage

					;===========Input the Heart Rates (Arrray Instantiation)============
 0000003B  B9 00000003			mov 		ecx, 3
 00000040  8D 35 00000104 R		lea			esi, HR

					;Firsr Heart Rate
					INVOKE		OutputStr, ADDR	strHR1
					INVOKE		InputInt
 00000055  89 06			mov			[esi], eax
 00000057  83 C6 04			add			esi, 4

					;Second Heart Rate
					INVOKE		OutputStr, ADDR	strHR2
					INVOKE		InputInt
 00000069  89 06			mov			[esi], eax
 0000006B  83 C6 04			add			esi, 4

					;Third Heart Rate
					INVOKE		OutputStr, ADDR	strHR3
					INVOKE		InputInt
 0000007D  89 06			mov			[esi], eax
 0000007F  83 C6 04			add			esi, 4	

					;===========Calculating Heart Rate for each Heart Rate(and Instantiations)============
 00000082  B9 00000003			mov			ecx, 3
 00000087  8D 35 00000104 R		lea			esi, HR
 0000008D  8D 3D 00000110 R		lea			edi, HRF

 00000093			CalculationLoop:	
 00000093  8B 06			mov			eax, [esi]
 00000095  2B 44 24 04			sub			eax, [esp + 4]
 00000099  0F AF 44 24 08		imul		eax, [esp + 8]
 0000009E  BB 000000DC			mov			ebx, 220
 000000A3  2B 1C 24			sub			ebx, [esp]

 000000A6  99				cdq
 000000A7  F7 FB			idiv		ebx
 000000A9  2B 44 24 04			sub			eax, [esp + 4]
 000000AD  89 07			mov			[edi], eax
 000000AF  83 C6 04			add			esi, 4
 000000B2  83 C7 04			add			edi, 4
 000000B5  E2 DC			loop		CalculationLoop

					;===========Displaying Heart Rate Factors============
					INVOKE		OutputStr, ADDR	strHRF
 000000C1  B9 00000003			mov			ecx, 3
 000000C6  8D 35 00000110 R		lea			esi, HRF
 000000CC  33 DB			xor			ebx, ebx

 000000CE			DisplayingLoop:
 000000CE  51				push		ecx

					INVOKE		OutputStr, ADDR	strDisp1
 000000D9  8B C3			mov			eax, ebx
					INVOKE		OutputInt, eax
					INVOKE		OutputStr, ADDR	strDisp2

 000000EB  8B 06			mov			eax, [esi]
					INVOKE		OutputInt, eax
 000000F3  83 C6 04			add			esi, 4
 000000F6  43				inc			ebx
 000000F7  59				pop			ecx
 000000F8  E2 D4			loop		DisplayingLoop

					;===========Exit the program============
					INVOKE		OutputStr, ADDR	strNL
					INVOKE		OutputStr, ADDR strExit
					INVOKE		InputInt
 00000113  83 F8 00			cmp			eax, 0
 00000116  74 06			je			EndProgram
 00000118  0F 8F FFFFFEE2		jg			_start

 0000011E			EndProgram:
					; We call the Operating System ExitProcess system call to close the process.
					INVOKE ExitProcess, 0
 00000125			Public _start
				END
Microsoft (R) Macro Assembler Version 6.11		    08/15/24 16:43:47
src\220138825_P04.asm					     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000011C DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000125 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00001  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000125 Private
  CalculationLoop  . . . . . . .	L Near	 00000093 _TEXT	
  DisplayingLoop . . . . . . . .	L Near	 000000CE _TEXT	
  EndProgram . . . . . . . . . .	L Near	 0000011E _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InputInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InputStr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputFloat8 . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputFloat  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputInt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputStr  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CalculationLoop  . . . . . . . .	L Near	 00000093 _TEXT	
DisplayingLoop . . . . . . . . .	L Near	 000000CE _TEXT	
EndProgram . . . . . . . . . . .	L Near	 0000011E _TEXT	
HRF  . . . . . . . . . . . . . .	DWord	 00000110 _DATA	
HR . . . . . . . . . . . . . . .	DWord	 00000104 _DATA	
IO_INC . . . . . . . . . . . . .	Text   	 1
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
arrHR  . . . . . . . . . . . . .	Byte	 000000F8 _DATA	
strAge . . . . . . . . . . . . .	Byte	 00000000 _DATA	
strCMul  . . . . . . . . . . . .	Byte	 00000035 _DATA	
strDisp1 . . . . . . . . . . . .	Byte	 000000EF _DATA	
strDisp2 . . . . . . . . . . . .	Byte	 000000F4 _DATA	
strExit  . . . . . . . . . . . .	Byte	 000000BA _DATA	
strHR1 . . . . . . . . . . . . .	Byte	 00000057 _DATA	
strHR2 . . . . . . . . . . . . .	Byte	 00000071 _DATA	
strHR3 . . . . . . . . . . . . .	Byte	 0000008B _DATA	
strHRF . . . . . . . . . . . . .	Byte	 000000A5 _DATA	
strNL  . . . . . . . . . . . . .	Byte	 00000102 _DATA	
strRHR . . . . . . . . . . . . .	Byte	 00000010 _DATA	

	   0 Warnings
	   0 Errors
