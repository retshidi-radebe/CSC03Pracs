Microsoft (R) Macro Assembler Version 6.11		    09/12/24 17:02:14
src\220138825_P06.asm					     Page 1 - 1


				;	Update all of this information to reflect your own details and the prac
				;	Author:     Radebe RE 220138825	
				;	Practical Assignment 05 2024
				.386
				.MODEL FLAT ; Flat memory model
				.STACK 4096 ; 4096 bytes

				;Include the I/O function
				INCLUDE		io.inc
			      C ;
			      C ; Simple I/O Routines - Version 2
			      C ;
			      C 
			      C IFNDEF IO_INC
 = 1			      C IO_INC equ <1>
			      C 
			      C OutputStr PROTO NEAR32 STDCALL :DWORD
			      C OutputInt PROTO NEAR32 STDCALL :DWORD
			      C OutputFloat PROTO NEAR32 STDCALL :DWORD
			      C OutputFloat8 PROTO NEAR32 STDCALL :QWORD
			      C InputInt PROTO NEAR32 STDCALL
			      C InputStr PROTO NEAR32 STDCALL :DWORD, :DWORD
			      C 
			      C ELSE
			      C ENDIF
			      C 

				; Exit function
				ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD

				; The data section stores all global variables
 00000000			.DATA
				;================================Global Variables===============================
 00000000  00000007 [			stepCountArray		DWORD		7 Dup(10, 20, 30, 40, 50, 60, 70)		;This is for seven days
	    0000000A
	    00000014
	    0000001E
	    00000028
	    00000032
	    0000003C
	    00000046
	   ]
 000000C4 00000000			stepCountSum		DWORD		0	;This stores the steps sum
 000000C8 00000000			stepCountAverage	DWORD		0	;This stores the average steps
 000000CC 00000000			index				DWORD		0
 000000D0 00000007			days				DWORD		7	;Days in a week

				;===============================String Prompts===================================
 000000D4 50 72 65 73 73		strExit				BYTE		"Press 0 to exit or any positive number to continue: ", 0
	   20 30 20 74 6F
	   20 65 78 69 74
	   20 6F 72 20 61
	   6E 79 20 70 6F
	   73 69 74 69 76
	   65 20 6E 75 6D
	   62 65 72 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   3A 20 00
 00000109 53 75 6D 20 6F		strSum				BYTE		"Sum of the step count: ", 0
	   66 20 74 68 65
	   20 73 74 65 70
	   20 63 6F 75 6E
	   74 3A 20 00
 00000121 41 76 65 72 61		strAve				BYTE		"Average Step Count: ", 0
	   67 65 20 53 74
	   65 70 20 43 6F
	   75 6E 74 3A 20
	   00
 00000136 0A 00				strNL				BYTE		10, 0

				; The code section may contain multiple tags such as _start, which is the entry
				; point of this assembly program
 00000000			.CODE

				;==================================Recursive Step Counting Function===================

 00000000			RecursiveStepCount PROC NEAR32
					;Stack Frame setups
 00000000  55				push		ebp
 00000001  8B EC			mov			ebp, esp

					;Backingup existing registers
 00000003  50				push		eax
 00000004  53				push 		ebx
 00000005  51				push 		ecx
 00000006  52				push 		edx
 00000007  9C				pushfd

					;Getting the index value
 00000008  8B 4D 08			mov			ecx, [ebp+8]		;ecx = index

					;Base casing
 0000000B  3B 0D 000000D0 R		cmp			ecx, [days]
 00000011  7D 15			jge			baseCase

					;Get current steps
 00000013  8B 04 8D			mov			eax, [stepCountArray + ecx*4]	;Loading the step count here
	   00000000 R
 0000001A  01 05 000000C4 R		add			[stepCountSum], eax				;Summing up the steps here

					;Incrementing
 00000020  41				inc			ecx

					;Recursive call
 00000021  51				push		ecx
 00000022  E8 FFFFFFD9			call		RecursiveStepCount
 00000027  59				pop			ecx

 00000028			baseCase:
					;Restoring the existing registers
 00000028  9D				popfd
 00000029  5A				pop			edx
 0000002A  59				pop			ecx
 0000002B  5B				pop			ebx
 0000002C  58				pop			eax

					;Destroying the stack frmae
 0000002D  8B E5			mov			esp, ebp
 0000002F  5D				pop			ebp

					;Return the parameters
 00000030  C2 0004			ret			4
 00000033			RecursiveStepCount ENDP

				;===================================Main Function=================================
 00000033			_start:
 00000033				; Most of your initial code will be under the _start tag.
					; The _start tag is just a memory address referenced by the Public indicator
					; highlighting which functions are available to calling functions.
					; _start gets called by the operating system to start this process.
					
					;Stack Frame set up
 00000033  55				push		ebp
 00000034  8B EC			mov			ebp, esp

					;Create space on the stack for local variable
 00000036  83 EC 0C			sub			esp, 12

					;Initialization
 00000039  B8 00000000			mov			eax, 0
 0000003E  89 45 FC			mov			[ebp-4], eax		;intCount
 00000041  89 45 F8			mov			[ebp-8], eax		;intConter

					;Call resursive function
 00000044  8D 0D 000000CC R		lea			ecx, [index]
 0000004A  51				push		ecx
 0000004B  E8 FFFFFFB0			call		RecursiveStepCount
 00000050  59				pop			ecx

					;Calculating the Average
 00000051  A1 000000C4 R		mov			eax, [stepCountSum]		;Loading the stepCountSum into eax
 00000056  8B 1D 000000D0 R		mov			ebx, [days]				;Loading the days into ebx
 0000005C  33 D2			xor			edx,edx					; Clear edx
 0000005E  F7 F3			div 		ebx						; StepCountSum/days
 00000060  A3 000000C8 R		mov			[stepCountAverage], eax	;Storing inside StepCountAcerage

					;Outsput Sum
 00000065  8D 05 00000109 R		lea			eax, [strSum]
 0000006B  50				push 		eax
 0000006C  E8 00000000 E		call		OutputStr
 00000071  A1 000000C4 R		mov			eax, [stepCountSum]
 00000076  50				push 		eax
 00000077  E8 00000000 E		call		OutputInt
 0000007C  8D 05 00000136 R		lea			eax, [strNL]
 00000082  50				push 		eax
 00000083  E8 00000000 E		call		OutputStr

					;Output Average
 00000088  8D 05 00000121 R		lea			eax, [strAve]
 0000008E  50				push 		eax
 0000008F  E8 00000000 E		call		OutputStr
 00000094  A1 000000C8 R		mov			eax, [stepCountAverage]
 00000099  50				push 		eax
 0000009A  E8 00000000 E		call		OutputInt
 0000009F  8D 05 00000136 R		lea			eax, [strNL]
 000000A5  50				push 		eax
 000000A6  E8 00000000 E		call		OutputStr

					;========================================Exit  Prompt====================================
 000000AB  8D 1D 000000D4 R			lea						ebx, strExit
 000000B1  53					push					ebx
 000000B2  E8 00000000 E			call					OutputStr
 000000B7  E8 00000000 E			call					InputInt
 000000BC  83 F8 00				cmp						eax, 0
 000000BF  0F 85 FFFFFF6E			jne						_start
					;Destroying the stack frame
 000000C5  8B E5			mov			esp, ebp
 000000C7  5D				pop			ebp

					; We call the Operating System ExitProcess system call to close the process.
					INVOKE ExitProcess, 0
 000000CF			Public _start
				END
Microsoft (R) Macro Assembler Version 6.11		    09/12/24 17:02:14
src\220138825_P06.asm					     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000138 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000CF DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00002  . . . . . . . . . .	P Near	 00000033 _TEXT	Length= 0000009C Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InputInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InputStr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputFloat8 . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputFloat  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputInt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputStr  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RecursiveStepCount . . . . . . .	P Near	 00000000 _TEXT	Length= 00000033 Public
  baseCase . . . . . . . . . . .	L Near	 00000028 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
IO_INC . . . . . . . . . . . . .	Text   	 1
_start . . . . . . . . . . . . .	L Near	 00000033 _TEXT	Public
days . . . . . . . . . . . . . .	DWord	 000000D0 _DATA	
index  . . . . . . . . . . . . .	DWord	 000000CC _DATA	
stepCountArray . . . . . . . . .	DWord	 00000000 _DATA	
stepCountAverage . . . . . . . .	DWord	 000000C8 _DATA	
stepCountSum . . . . . . . . . .	DWord	 000000C4 _DATA	
strAve . . . . . . . . . . . . .	Byte	 00000121 _DATA	
strExit  . . . . . . . . . . . .	Byte	 000000D4 _DATA	
strNL  . . . . . . . . . . . . .	Byte	 00000136 _DATA	
strSum . . . . . . . . . . . . .	Byte	 00000109 _DATA	

	   0 Warnings
	   0 Errors
